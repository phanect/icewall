import { existsSync as exists } from "node:fs";
import { mkdir, readFile, rm, writeFile } from "node:fs/promises";
import { join } from "node:path";
import { env } from "node:process";
import "dotenv/config";

const generateWranglerJson = async () => {
  const wranglerJsonDir = join(import.meta.dirname, "../.wrangler/deploy/");

  await mkdir(wranglerJsonDir, { recursive: true });
  await writeFile(
    join(wranglerJsonDir, "config.json"),
    JSON.stringify({
      configPath: "../../wrangler.jsonc", // relative path from .wrangler/deploy/config.json
      d1_databases: [{
        database_id: env.CLOUDFLARE_DATABASE_ID ?? undefined,
      }],
    }, undefined, 2),
  );
};

const generateDevVarsFromDotEnv = async () => {
  if (env.SERVER_ENV !== "development") {
    console.info(".dev.env was not generated since we are not on local development machine.\nTo generate .dev.env, set `SERVER_ENV=\"development\"` in workspaces/example/.env. .");
  }

  const dotEnvPath = join(import.meta.dirname, "../.env");
  const devVarsPath = join(import.meta.dirname, "../.dev.vars");

  if (!exists(dotEnvPath)) {
    console.info(".env was not found in example project root. Skip to generate .dev.vars.");
    return;
  }

  await rm(devVarsPath, { force: true });

  const devVarsContent = (await readFile(dotEnvPath)).toString();

  await writeFile(devVarsPath, `
# !!! DO NOT EDIT THIS FILE MANUALLY !!!
# This file is automatically copied from .env. Any manual changes are overwritten on \`pnpm run dev\`.

${ devVarsContent }
`.trim());
};

await Promise.all([
  generateWranglerJson(),
  generateDevVarsFromDotEnv(),
]);
